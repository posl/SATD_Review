{
  "meta_a": {
    "name": "src/quick/scenegraph/qsgrenderloop.cpp",
    "content_type": "text/x-c++src",
    "lines": 435,
    "web_links": [
      {
        "name": "gitweb",
        "url": "/gitweb?p\u003dqt%2Fqtdeclarative.git;hb\u003d0c5620c43350804a5df03825ae7a849c783fbfeb;f\u003dsrc%2Fquick%2Fscenegraph%2Fqsgrenderloop.cpp"
      }
    ]
  },
  "meta_b": {
    "name": "src/quick/scenegraph/qsgrenderloop.cpp",
    "content_type": "text/x-c++src",
    "lines": 458,
    "web_links": [
      {
        "name": "gitweb",
        "url": "/gitweb?p\u003dqt%2Fqtdeclarative.git;hb\u003drefs%2Fchanges%2F73%2F79973%2F8;f\u003dsrc%2Fquick%2Fscenegraph%2Fqsgrenderloop.cpp"
      }
    ]
  },
  "change_type": "MODIFIED",
  "diff_header": [
    "diff --git a/src/quick/scenegraph/qsgrenderloop.cpp b/src/quick/scenegraph/qsgrenderloop.cpp",
    "index 644a674..6647ec8 100644",
    "--- a/src/quick/scenegraph/qsgrenderloop.cpp",
    "+++ b/src/quick/scenegraph/qsgrenderloop.cpp"
  ],
  "content": [
    {
      "ab": [
        "/****************************************************************************",
        "**",
        "** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).",
        "** Contact: http://www.qt-project.org/legal",
        "**",
        "** This file is part of the QtQuick module of the Qt Toolkit.",
        "**",
        "** $QT_BEGIN_LICENSE:LGPL$",
        "** Commercial License Usage",
        "** Licensees holding valid commercial Qt licenses may use this file in",
        "** accordance with the commercial license agreement provided with the",
        "** Software or, alternatively, in accordance with the terms contained in",
        "** a written agreement between you and Digia.  For licensing terms and",
        "** conditions see http://qt.digia.com/licensing.  For further information",
        "** use the contact form at http://qt.digia.com/contact-us.",
        "**",
        "** GNU Lesser General Public License Usage",
        "** Alternatively, this file may be used under the terms of the GNU Lesser",
        "** General Public License version 2.1 as published by the Free Software",
        "** Foundation and appearing in the file LICENSE.LGPL included in the",
        "** packaging of this file.  Please review the following information to",
        "** ensure the GNU Lesser General Public License version 2.1 requirements",
        "** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.",
        "**",
        "** In addition, as a special exception, Digia gives you certain additional",
        "** rights.  These rights are described in the Digia Qt LGPL Exception",
        "** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.",
        "**",
        "** GNU General Public License Usage",
        "** Alternatively, this file may be used under the terms of the GNU",
        "** General Public License version 3.0 as published by the Free Software",
        "** Foundation and appearing in the file LICENSE.GPL included in the",
        "** packaging of this file.  Please review the following information to",
        "** ensure the GNU General Public License version 3.0 requirements will be",
        "** met: http://www.gnu.org/copyleft/gpl.html.",
        "**",
        "**",
        "** $QT_END_LICENSE$",
        "**",
        "****************************************************************************/",
        "",
        "#include \"qsgrenderloop_p.h\"",
        "#include \"qsgthreadedrenderloop_p.h\"",
        "#include \"qsgwindowsrenderloop_p.h\"",
        "",
        "#include \u003cQtCore/QCoreApplication\u003e",
        "#include \u003cQtCore/QTime\u003e",
        "#include \u003cQtCore/QScopedPointer\u003e"
      ]
    },
    {
      "b": [
        "#include \u003cQtCore/QLibraryInfo\u003e"
      ]
    },
    {
      "ab": [
        "#include \u003cQtCore/private/qabstractanimation_p.h\u003e",
        "",
        "#include \u003cQtGui/QOpenGLContext\u003e",
        "#include \u003cQtGui/private/qguiapplication_p.h\u003e",
        "#include \u003cqpa/qplatformintegration.h\u003e",
        "",
        "#include \u003cQtQml/private/qqmlglobal_p.h\u003e",
        "",
        "#include \u003cQtQuick/QQuickWindow\u003e",
        "#include \u003cQtQuick/private/qquickwindow_p.h\u003e",
        "#include \u003cQtQuick/private/qsgcontext_p.h\u003e",
        "#include \u003cprivate/qquickprofiler_p.h\u003e",
        ""
      ]
    },
    {
      "b": [
        "#ifdef Q_OS_WIN",
        "#  include \u003cQtCore/qt_windows.h\u003e",
        "#endif",
        ""
      ]
    },
    {
      "ab": [
        "QT_BEGIN_NAMESPACE",
        "",
        "DEFINE_BOOL_CONFIG_OPTION(qsg_render_timing, QSG_RENDER_TIMING)",
        "",
        "extern Q_GUI_EXPORT QImage qt_gl_read_framebuffer(const QSize \u0026size, bool alpha_format, bool include_alpha);",
        "",
        "/*!",
        "    expectations for this manager to work:",
        "     - one opengl context to render multiple windows",
        "     - OpenGL pipeline will not block for vsync in swap",
        "     - OpenGL pipeline will block based on a full buffer queue.",
        "     - Multiple screens can share the OpenGL context",
        "     - Animations are advanced for all windows once per swap",
        " */",
        "",
        "DEFINE_BOOL_CONFIG_OPTION(qmlNoThreadedRenderer, QML_BAD_GUI_RENDER_LOOP);",
        "DEFINE_BOOL_CONFIG_OPTION(qmlForceThreadedRenderer, QML_FORCE_THREADED_RENDERER); // Might trigger graphics driver threading bugs, use at own risk",
        "",
        "Q_GLOBAL_STATIC(QScopedPointer\u003cQSGRenderLoop\u003e, s_renderLoopInstance);",
        "",
        "QSGRenderLoop::~QSGRenderLoop()",
        "{",
        "}",
        "",
        "class QSGGuiThreadRenderLoop : public QSGRenderLoop",
        "{",
        "    Q_OBJECT",
        "public:",
        "    QSGGuiThreadRenderLoop();",
        "    ~QSGGuiThreadRenderLoop();",
        "",
        "    void show(QQuickWindow *window);",
        "    void hide(QQuickWindow *window);",
        "",
        "    void windowDestroyed(QQuickWindow *window);",
        "",
        "    void renderWindow(QQuickWindow *window);",
        "    void exposureChanged(QQuickWindow *window);",
        "    QImage grab(QQuickWindow *window);",
        "",
        "    void maybeUpdate(QQuickWindow *window);",
        "    void update(QQuickWindow *window) { maybeUpdate(window); } // identical for this implementation.",
        "",
        "    void releaseResources(QQuickWindow *) { }",
        "",
        "    QAnimationDriver *animationDriver() const { return 0; }",
        "",
        "    QSGContext *sceneGraphContext() const;",
        "    QSGRenderContext *createRenderContext(QSGContext *) const { return rc; }",
        "",
        "    bool event(QEvent *);",
        "",
        "    struct WindowData {",
        "        bool updatePending : 1;",
        "        bool grabOnly : 1;",
        "    };",
        "",
        "    QHash\u003cQQuickWindow *, WindowData\u003e m_windows;",
        "",
        "    QOpenGLContext *gl;",
        "    QSGContext *sg;",
        "    QSGRenderContext *rc;",
        "",
        "    QImage grabContent;",
        "    int m_update_timer;",
        "",
        "    bool eventPending;",
        "};",
        "",
        "bool QSGRenderLoop::useConsistentTiming()",
        "{",
        "    bool bufferQueuing \u003d QGuiApplicationPrivate::platformIntegration()-\u003ehasCapability(QPlatformIntegration::BufferQueueingOpenGL);",
        "    // Enable fixed animation steps...",
        "    QByteArray fixed \u003d qgetenv(\"QSG_FIXED_ANIMATION_STEP\");",
        "    bool fixedAnimationSteps \u003d bufferQueuing;",
        "    if (fixed \u003d\u003d \"no\")",
        "        fixedAnimationSteps \u003d false;",
        "    else if (fixed.length())",
        "        fixedAnimationSteps \u003d true;",
        "    return fixedAnimationSteps;",
        "}",
        "",
        "QSGRenderLoop *QSGRenderLoop::instance()",
        "{",
        "    if (s_renderLoopInstance-\u003eisNull()) {",
        "        s_renderLoopInstance-\u003ereset(QSGContext::createWindowManager());",
        "",
        "        bool info \u003d qEnvironmentVariableIsSet(\"QSG_INFO\");",
        "",
        "        if (useConsistentTiming()) {",
        "            QUnifiedTimer::instance(true)-\u003esetConsistentTiming(true);",
        "            if (info)",
        "                qDebug() \u003c\u003c \"QSG: using fixed animation steps\";",
        "        }",
        "",
        "        if (s_renderLoopInstance-\u003eisNull()) {",
        "",
        "            enum RenderLoopType {",
        "                BasicRenderLoop,",
        "                ThreadedRenderLoop,",
        "                WindowsRenderLoop",
        "            };",
        "",
        "            RenderLoopType loopType \u003d BasicRenderLoop;",
        "",
        "#ifdef Q_OS_WIN",
        "            loopType \u003d WindowsRenderLoop;",
        "#else",
        "            if (QGuiApplicationPrivate::platformIntegration()-\u003ehasCapability(QPlatformIntegration::ThreadedOpenGL))",
        "                loopType \u003d ThreadedRenderLoop;",
        "#endif",
        "            if (qmlNoThreadedRenderer())",
        "                loopType \u003d BasicRenderLoop;",
        "            else if (qmlForceThreadedRenderer())",
        "                loopType \u003d ThreadedRenderLoop;",
        "",
        "            const QByteArray loopName \u003d qgetenv(\"QSG_RENDER_LOOP\");",
        "            if (loopName \u003d\u003d QByteArrayLiteral(\"windows\"))",
        "                loopType \u003d WindowsRenderLoop;",
        "            else if (loopName \u003d\u003d QByteArrayLiteral(\"basic\"))",
        "                loopType \u003d BasicRenderLoop;",
        "            else if (loopName \u003d\u003d QByteArrayLiteral(\"threaded\"))",
        "                loopType \u003d ThreadedRenderLoop;",
        "",
        "            switch (loopType) {",
        "            case ThreadedRenderLoop:",
        "                if (info) qDebug() \u003c\u003c \"QSG: threaded render loop\";",
        "                s_renderLoopInstance-\u003ereset(new QSGThreadedRenderLoop());",
        "                break;",
        "            case WindowsRenderLoop:",
        "                if (info) qDebug() \u003c\u003c \"QSG: windows render loop\";",
        "                s_renderLoopInstance-\u003ereset(new QSGWindowsRenderLoop());",
        "                break;",
        "            default:",
        "                if (info) qDebug() \u003c\u003c \"QSG: basic render loop\";",
        "                s_renderLoopInstance-\u003ereset(new QSGGuiThreadRenderLoop());",
        "                break;",
        "            }",
        "        }",
        "    }",
        "    return s_renderLoopInstance-\u003edata();",
        "}",
        "",
        "void QSGRenderLoop::setInstance(QSGRenderLoop *instance)",
        "{",
        "    Q_ASSERT(s_renderLoopInstance-\u003eisNull());",
        "    s_renderLoopInstance-\u003ereset(instance);",
        "}",
        ""
      ]
    },
    {
      "b": [
        "void QSGRenderLoop::handleContextCreationFailure(QQuickWindow *window,",
        "                                                 bool isEs)",
        "{",
        "    QString translatedMessage;",
        "    QString untranslatedMessage;",
        "    QQuickWindowPrivate::contextCreationFailureMessage(window-\u003erequestedFormat(),",
        "                                                       \u0026translatedMessage,",
        "                                                       \u0026untranslatedMessage,",
        "                                                       isEs);",
        "    // If there is a slot connected to the error signal, emit it and leave it to",
        "    // the application to do something with the message. If nothing is connected,",
        "    // show a message on our own and terminate.",
        "    const bool signalEmitted \u003d",
        "        QQuickWindowPrivate::get(window)-\u003eemitError(QQuickWindow::ContextNotAvailable,",
        "                                                    translatedMessage);",
        "#if defined(Q_OS_WIN) \u0026\u0026 !defined(Q_OS_WINCE) \u0026\u0026 !defined(Q_OS_WINRT)",
        "    if (!signalEmitted \u0026\u0026 !QLibraryInfo::isDebugBuild() \u0026\u0026 !GetConsoleWindow()) {",
        "        MessageBox(0, (LPCTSTR) translatedMessage.utf16(),",
        "                   (LPCTSTR)(QCoreApplication::applicationName().utf16()),",
        "                   MB_OK | MB_ICONERROR);",
        "    }",
        "#endif // Q_OS_WIN \u0026\u0026 !Q_OS_WINCE \u0026\u0026 !Q_OS_WINRT",
        "    if (!signalEmitted)",
        "        qFatal(\"%s\", qPrintable(untranslatedMessage));",
        "}",
        ""
      ]
    },
    {
      "ab": [
        "QSGGuiThreadRenderLoop::QSGGuiThreadRenderLoop()",
        "    : gl(0)",
        "    , eventPending(false)",
        "{",
        "    sg \u003d QSGContext::createDefaultContext();",
        "    rc \u003d sg-\u003ecreateRenderContext();",
        "}",
        "",
        "QSGGuiThreadRenderLoop::~QSGGuiThreadRenderLoop()",
        "{",
        "    delete rc;",
        "    delete sg;",
        "}",
        "",
        "void QSGGuiThreadRenderLoop::show(QQuickWindow *window)",
        "{",
        "    WindowData data;",
        "    data.updatePending \u003d false;",
        "    data.grabOnly \u003d false;",
        "    m_windows[window] \u003d data;",
        "",
        "    maybeUpdate(window);",
        "}",
        "",
        "void QSGGuiThreadRenderLoop::hide(QQuickWindow *window)",
        "{",
        "    if (!m_windows.contains(window))",
        "        return;",
        "",
        "    m_windows.remove(window);",
        "    QQuickWindowPrivate *cd \u003d QQuickWindowPrivate::get(window);",
        "    if (gl)",
        "        gl-\u003emakeCurrent(window);",
        "    cd-\u003efireAboutToStop();",
        "    cd-\u003ecleanupNodesOnShutdown();",
        "",
        "    if (m_windows.size() \u003d\u003d 0) {",
        "        if (!cd-\u003epersistentSceneGraph) {",
        "            rc-\u003einvalidate();",
        "            QCoreApplication::sendPostedEvents(0, QEvent::DeferredDelete);",
        "            if (!cd-\u003epersistentGLContext) {",
        "                delete gl;",
        "                gl \u003d 0;",
        "            }",
        "        }",
        "    }",
        "}",
        "",
        "void QSGGuiThreadRenderLoop::windowDestroyed(QQuickWindow *window)",
        "{",
        "    hide(window);",
        "    if (m_windows.size() \u003d\u003d 0) {",
        "        rc-\u003einvalidate();",
        "        QCoreApplication::sendPostedEvents(0, QEvent::DeferredDelete);",
        "        delete gl;",
        "        gl \u003d 0;",
        "    }",
        "}",
        "",
        "void QSGGuiThreadRenderLoop::renderWindow(QQuickWindow *window)",
        "{",
        "    QQuickWindowPrivate *cd \u003d QQuickWindowPrivate::get(window);",
        "    if (!cd-\u003eisRenderable() || !m_windows.contains(window))",
        "        return;",
        "",
        "    WindowData \u0026data \u003d const_cast\u003cWindowData \u0026\u003e(m_windows[window]);",
        "",
        "    bool current \u003d false;",
        "",
        "    if (!gl) {",
        "        gl \u003d new QOpenGLContext();",
        "        gl-\u003esetFormat(window-\u003erequestedFormat());",
        "        if (QSGContext::sharedOpenGLContext())",
        "            gl-\u003esetShareContext(QSGContext::sharedOpenGLContext());",
        "        if (!gl-\u003ecreate()) {"
      ]
    },
    {
      "b": [
        "            const bool isEs \u003d gl-\u003eisES();"
      ]
    },
    {
      "ab": [
        "            delete gl;",
        "            gl \u003d 0;"
      ]
    },
    {
      "a": [
        "            QString formatStr;",
        "            QDebug(\u0026formatStr) \u003c\u003c window-\u003erequestedFormat();",
        "            QString contextType \u003d QLatin1String(\"OpenGL\");",
        "            const char *msg \u003d QT_TRANSLATE_NOOP(\"QSGGuiThreadRenderLoop\", \"Failed to create %1 context for format %2\");",
        "            QString translatedMsg \u003d tr(msg).arg(contextType).arg(formatStr);",
        "            QString nonTranslatedMsg \u003d QString(QLatin1String(msg)).arg(contextType).arg(formatStr);",
        "            bool signalEmitted \u003d QQuickWindowPrivate::get(window)-\u003eemitError(QQuickWindow::ContextNotAvailable,",
        "                                                                             translatedMsg);",
        "            if (!signalEmitted)",
        "                qFatal(\"%s\", qPrintable(nonTranslatedMsg));"
      ],
      "b": [
        "            handleContextCreationFailure(window, isEs);"
      ]
    },
    {
      "ab": [
        "        } else {",
        "            cd-\u003efireOpenGLContextCreated(gl);",
        "            current \u003d gl-\u003emakeCurrent(window);",
        "        }",
        "        if (current)",
        "            cd-\u003econtext-\u003einitialize(gl);",
        "    } else {",
        "        current \u003d gl-\u003emakeCurrent(window);",
        "    }",
        "",
        "    bool alsoSwap \u003d data.updatePending;",
        "    data.updatePending \u003d false;",
        "",
        "    if (!current)",
        "        return;",
        "",
        "    cd-\u003epolishItems();",
        "",
        "    emit window-\u003eafterAnimating();",
        "",
        "    qint64 renderTime \u003d 0, syncTime \u003d 0;",
        "    QElapsedTimer renderTimer;",
        "    bool profileFrames \u003d qsg_render_timing()  || QQuickProfiler::enabled;",
        "    if (profileFrames)",
        "        renderTimer.start();",
        "",
        "    cd-\u003esyncSceneGraph();",
        "",
        "    if (profileFrames)",
        "        syncTime \u003d renderTimer.nsecsElapsed();",
        "",
        "    cd-\u003erenderSceneGraph(window-\u003esize());",
        "",
        "    if (profileFrames)",
        "        renderTime \u003d renderTimer.nsecsElapsed() - syncTime;",
        "",
        "    if (data.grabOnly) {",
        "        grabContent \u003d qt_gl_read_framebuffer(window-\u003esize(), false, false);",
        "        data.grabOnly \u003d false;",
        "    }",
        "",
        "    if (alsoSwap \u0026\u0026 window-\u003eisVisible()) {",
        "        gl-\u003eswapBuffers(window);",
        "        cd-\u003efireFrameSwapped();",
        "    }",
        "",
        "    qint64 swapTime \u003d 0;",
        "    if (profileFrames) {",
        "        swapTime \u003d renderTimer.nsecsElapsed() - renderTime - syncTime;",
        "    }",
        "",
        "    if (qsg_render_timing()) {",
        "        static QTime lastFrameTime \u003d QTime::currentTime();",
        "        qDebug() \u003c\u003c \"- Breakdown of frame time; sync:\" \u003c\u003c syncTime/1000000",
        "                 \u003c\u003c \"ms render:\" \u003c\u003c renderTime/1000000 \u003c\u003c \"ms swap:\" \u003c\u003c swapTime/1000000",
        "                 \u003c\u003c \"ms total:\" \u003c\u003c (swapTime + renderTime + syncTime)/1000000",
        "                 \u003c\u003c \"ms time since last frame:\" \u003c\u003c (lastFrameTime.msecsTo(QTime::currentTime()))",
        "                 \u003c\u003c \"ms\";",
        "        lastFrameTime \u003d QTime::currentTime();",
        "    }",
        "",
        "    Q_QUICK_SG_PROFILE1(QQuickProfiler::SceneGraphRenderLoopFrame, (",
        "            syncTime,",
        "            renderTime,",
        "            swapTime));",
        "",
        "    // Might have been set during syncSceneGraph()",
        "    if (data.updatePending)",
        "        maybeUpdate(window);",
        "}",
        "",
        "void QSGGuiThreadRenderLoop::exposureChanged(QQuickWindow *window)",
        "{",
        "    if (window-\u003eisExposed()) {",
        "        m_windows[window].updatePending \u003d true;",
        "        renderWindow(window);",
        "    }",
        "}",
        "",
        "QImage QSGGuiThreadRenderLoop::grab(QQuickWindow *window)",
        "{",
        "    if (!m_windows.contains(window))",
        "        return QImage();",
        "",
        "    m_windows[window].grabOnly \u003d true;",
        "",
        "    renderWindow(window);",
        "",
        "    QImage grabbed \u003d grabContent;",
        "    grabContent \u003d QImage();",
        "    return grabbed;",
        "}",
        "",
        "",
        "",
        "void QSGGuiThreadRenderLoop::maybeUpdate(QQuickWindow *window)",
        "{",
        "    if (!m_windows.contains(window))",
        "        return;",
        "",
        "    m_windows[window].updatePending \u003d true;",
        "",
        "    if (!eventPending) {",
        "        const int exhaust_delay \u003d 5;",
        "        m_update_timer \u003d startTimer(exhaust_delay, Qt::PreciseTimer);",
        "        eventPending \u003d true;",
        "    }",
        "}",
        "",
        "",
        "",
        "QSGContext *QSGGuiThreadRenderLoop::sceneGraphContext() const",
        "{",
        "    return sg;",
        "}",
        "",
        "",
        "bool QSGGuiThreadRenderLoop::event(QEvent *e)",
        "{",
        "    if (e-\u003etype() \u003d\u003d QEvent::Timer) {",
        "        eventPending \u003d false;",
        "        killTimer(m_update_timer);",
        "        m_update_timer \u003d 0;",
        "        for (QHash\u003cQQuickWindow *, WindowData\u003e::const_iterator it \u003d m_windows.constBegin();",
        "             it !\u003d m_windows.constEnd(); ++it) {",
        "            const WindowData \u0026data \u003d it.value();",
        "            if (data.updatePending)",
        "                renderWindow(it.key());",
        "        }",
        "        return true;",
        "    }",
        "    return QObject::event(e);",
        "}",
        "",
        "#include \"qsgrenderloop.moc\"",
        "",
        "QT_END_NAMESPACE",
        ""
      ]
    }
  ]
}
